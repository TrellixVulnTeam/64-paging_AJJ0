(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/forms'], factory) :
	(factory((global['ngx-counter'] = {}),global._angular_core,global._angular_common,global._angular_forms));
}(this, (function (exports,_angular_core,_angular_common,_angular_forms) { 'use strict';

var CounterComponent = (function () {
    function CounterComponent() {
        this.change = new _angular_core.EventEmitter();
        this.font = 'monospace';
        this.color = 'blue';
        this.bgcolor = '#d6f0f9';
        this.size = 'medium';
        this.speed = 1000;
        this._countValue = 0;
        this.propagateChange = function (_) { };
    }
    Object.defineProperty(CounterComponent.prototype, "countValue", {
        /**
         * @return {?}
         */
        get: function () {
            return this._countValue;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            this._countValue = val;
            this.propagateChange(this._countValue);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CounterComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.blink = false;
        this.circuit = -1;
        this.limit = this.limit !== undefined ? this.limit : this.countValue + 10;
        switch (this.theme) {
            case 'red':
                this.color = 'red';
                this.bgcolor = '#fff0f0';
                break;
            case 'green':
                this.color = 'green';
                this.bgcolor = '#e0fff0';
                break;
            case 'gray':
                this.color = 'gray';
                this.bgcolor = '#f0f0f0';
                break;
            default:
                break;
        }
        this.timer = setInterval(function () {
            if (_this.countValue >= _this.limit) {
                _this.blink = false;
                _this.circuit = -1;
                clearInterval(_this.timer);
                return;
            }
            _this.circuit++;
            if (_this.circuit > 3) {
                _this.circuit = 0;
            }
            _this.blink = _this.circuit === 1 || _this.circuit === 3 ? !_this.blink : _this.blink;
            if (_this.circuit === 0) {
                _this.countValue++;
                _this.change.emit(_this.countValue);
            }
        }, this.speed / 4);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CounterComponent.prototype.writeValue = function (value) {
        if (value !== undefined) {
            this.countValue = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CounterComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @return {?}
     */
    CounterComponent.prototype.registerOnTouched = function () { };
    /**
     * @return {?}
     */
    CounterComponent.prototype.getColor = function () {
        return this.color;
    };
    return CounterComponent;
}());
CounterComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'ngx-counter',
                template: "\n<div class=\"ct-wrap ct-anim\"\n  [class.blink]=\"blink\"\n  [class.small]=\"size == 'small'\"\n  [class.medium]=\"size == 'medium'\"\n  [class.big]=\"size == 'big'\"\n  [class.large]=\"size == 'large'\"\n  [class.xl]=\"size == 'xl'\"\n  [style.color]=\"color\"\n  [style.background-color]=\"bgcolor\"\n  [style.border-top-color]=\"circuit === 0 ? getColor() : bgcolor\"\n  [style.border-right-color]=\"circuit === 1 ? getColor() : bgcolor\"\n  [style.border-bottom-color]=\"circuit === 2 ? getColor() : bgcolor\"\n  [style.border-left-color]=\"circuit === 3 ? getColor() : bgcolor\"\n  >\n  <div class=\"ct-count\"\n    [class.ct-1x]=\"size == 'small'\"\n    [class.ct-2x]=\"size == 'medium'\"\n    [class.ct-3x]=\"size == 'big'\"\n    [class.ct-4x]=\"size == 'large'\"\n    [class.ct-5x]=\"size == 'xl'\"\n    [style.font-family]=\"font\"\n  >\n    {{countValue}}\n  </div>\n</div>\n  ",
                styles: ["\n.ct-wrap {\n  display: inline-block;\n  /*background-color: #d6f0f9;*/\n  color: blue;\n  border-radius: 50%;\n  border-style: solid;\n  border-color: #d6f0f9;\n}\n\n.small {\n  border-width: 3px;\n  width: 40px;\n  height: 40px;\n}\n\n.medium {\n  border-width: 5px;\n  width: 50px;\n  height: 50px;\n}\n\n.big {\n  border-width: 7px;\n  width: 60px;\n  height: 60px;\n}\n\n.large {\n  border-width: 9px;\n  width: 70px;\n  height: 70px;\n}\n\n.xl {\n  border-width: 10px;\n  width: 80px;\n  height: 80px;\n}\n\n.ct-anim {\n  -webkit-transition: background-color 250ms, border-top-color 250ms, border-bottom-color 250ms, border-right-color 250ms, border-left-color 250ms;\n  transition: background-color 250ms, border-top-color 250ms, border-bottom-color 250ms, border-right-color 250ms, border-left-color 250ms;\n}\n\n.blink {\n  background-color: #fcfcfc !important;\n}\n\n.ct-count {\n  font-family: monospace;\n  position: relative;\n  text-align: center;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n}\n\n.ct-5x {\n  font-size: 48px;\n  font-weight: bold;\n}\n\n.ct-4x {\n  font-size: 40px;\n  font-weight: bold;\n}\n\n.ct-3x {\n  font-size: 32px;\n  font-weight: bold;\n}\n\n.ct-2x {\n  font-size: 24px;\n  font-weight: bold;\n}\n\n.ct-1x {\n  font-size: 16px;\n  font-weight: bold;\n}\n  "],
                providers: [
                    {
                        provide: _angular_forms.NG_VALUE_ACCESSOR,
                        useExisting: _angular_core.forwardRef(function () { return CounterComponent; }),
                        multi: true
                    }
                ]
            },] },
];
/**
 * @nocollapse
 */
CounterComponent.ctorParameters = function () { return []; };
CounterComponent.propDecorators = {
    'change': [{ type: _angular_core.Output },],
    'font': [{ type: _angular_core.Input },],
    'theme': [{ type: _angular_core.Input },],
    'color': [{ type: _angular_core.Input },],
    'bgcolor': [{ type: _angular_core.Input },],
    'size': [{ type: _angular_core.Input },],
    'speed': [{ type: _angular_core.Input },],
    'limit': [{ type: _angular_core.Input },],
    'countValue': [{ type: _angular_core.Input },],
};

var CounterModule = (function () {
    function CounterModule() {
    }
    /**
     * @return {?}
     */
    CounterModule.forRoot = function () {
        return {
            ngModule: CounterModule
        };
    };
    return CounterModule;
}());
CounterModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                imports: [
                    _angular_common.CommonModule
                ],
                declarations: [
                    CounterComponent
                ],
                exports: [
                    CounterComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
CounterModule.ctorParameters = function () { return []; };

exports.CounterModule = CounterModule;
exports.CounterComponent = CounterComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
