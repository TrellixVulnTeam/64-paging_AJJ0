import { Component, ElementRef, EventEmitter, HostListener, Input, Output, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import * as ease from 'ease-component';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function CounterComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 5);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 6);
    ɵngcc0.ɵɵprojection(5, 1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.count);
} }
function CounterComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.finishedText);
} }
function CounterComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelement(1, "div", 9);
    ɵngcc0.ɵɵelement(2, "div", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r2.getCircleStyle());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r2.getBarStyle());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r2.getFillStyle());
} }
const _c0 = [[["ng-counter-prefix"]], [["ng-counter-suffix"]]];
const _c1 = function (a0) { return { "ng-counter--with-circle": a0 }; };
const _c2 = ["ng-counter-prefix", "ng-counter-suffix"];
class CounterComponent {
    /**
     * @param {?} hostElement
     */
    constructor(hostElement) {
        this.hostElement = hostElement;
        this.mode = 'onInit';
        this.from = 0;
        this.to = 0;
        this.animationTime = 4000;
        this.animationType = 'linear';
        this.showCircle = true;
        this.circleColor = '#307bbb';
        this.fontSize = 150;
        this.delay = 0;
        this.finishedText = '';
        this.finished = new EventEmitter();
        this._hold = true;
        this._percentDone = 0;
        this._holdProgress = 0;
        this._finishedCounting = false;
        this.nativeElement = /** @type {?} */ (hostElement.nativeElement);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onWindowChange($event) {
        if (this.mode !== 'viewport') {
            return;
        }
        if (this.hold && this.isElementInViewport()) {
            this.start();
        }
    }
    /**
     * @return {?}
     */
    get startTimeout() {
        return this._startTimeout;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startTimeout(value) {
        this._startTimeout = value;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this._nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nativeElement(value) {
        this._nativeElement = value;
    }
    /**
     * @return {?}
     */
    get holdProgress() {
        return this._holdProgress;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set holdProgress(value) {
        this._holdProgress = value;
    }
    /**
     * @return {?}
     */
    get percentDone() {
        return this._percentDone;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set percentDone(value) {
        this._percentDone = value;
    }
    /**
     * @return {?}
     */
    get count() {
        return this._count;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set count(value) {
        this._count = value;
    }
    /**
     * @return {?}
     */
    get startTime() {
        return this._startTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startTime(value) {
        this._startTime = value;
    }
    /**
     * @return {?}
     */
    get hold() {
        return this._hold;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hold(value) {
        this._hold = value;
    }
    /**
     * @return {?}
     */
    get finishedCounting() {
        return this._finishedCounting;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set finishedCounting(value) {
        this._finishedCounting = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    start() {
        if (this.delay > 0) {
            this.startTimeout = window.setTimeout(() => {
                this.startAction();
            }, this.delay);
            return;
        }
        this.startAction();
    }
    /**
     * @return {?}
     */
    stop() {
        window.clearTimeout(this.startTimeout);
        this.hold = true;
    }
    /**
     * @return {?}
     */
    restart() {
        this.init();
    }
    /**
     * @return {?}
     */
    init() {
        this.hold = true;
        this.count = this.from;
        this.holdProgress = 0;
        this.startTime = undefined;
        this.percentDone = 0;
        this.finishedCounting = false;
        window.clearTimeout(this.startTimeout);
        if (typeof this.of === 'undefined') {
            this.of = this.to;
        }
        if (this.mode === 'onInit') {
            this.start();
        }
    }
    /**
     * @return {?}
     */
    getCircleStyle() {
        return {
            'clip': this.percentDone >= 0.5 ? 'rect(auto, auto, auto, auto)' : 'rect(0em, 1em, 1em, 0.5em)'
        };
    }
    /**
     * @return {?}
     */
    getBarStyle() {
        const /** @type {?} */ rotateDeg = 360 * this.percentDone;
        return {
            'transform': `rotate(${rotateDeg}deg)`,
            'border-color': this.circleColor
        };
    }
    /**
     * @return {?}
     */
    getFillStyle() {
        const /** @type {?} */ rotateDeg = this.percentDone > 0.5 ? 180 : 0;
        return {
            'display': this.percentDone <= 0.5 ? 'none' : 'block',
            'transform': `rotate(${rotateDeg}deg)`,
            'border-color': this.circleColor
        };
    }
    /**
     * @return {?}
     */
    startAction() {
        this.hold = false;
        this.requestFrame();
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    step(timestamp) {
        if (!this.startTime) {
            this.startTime = timestamp;
        }
        let /** @type {?} */ progress = timestamp - this.startTime;
        progress += this.holdProgress;
        if (this.hold) {
            this.holdProgress = progress;
            this.startTime = undefined;
            return;
        }
        const /** @type {?} */ easeValue = ease[this.animationType](progress / this.animationTime);
        let /** @type {?} */ currentCount = Math.round(easeValue * this.to);
        if (currentCount >= this.to) {
            currentCount = this.to;
        }
        this.count = currentCount;
        this.percentDone = currentCount / this.of;
        if (progress < this.animationTime) {
            this.requestFrame();
            return;
        }
        // Finished
        this.finishedCounting = true;
        this.finished.emit();
    }
    /**
     * @return {?}
     */
    requestFrame() {
        window.requestAnimationFrame(this.step.bind(this));
    }
    /**
     * @return {?}
     */
    isElementInViewport() {
        const /** @type {?} */ rect = this.nativeElement.getBoundingClientRect();
        return (rect.top >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight));
    }
}
CounterComponent.ɵfac = function CounterComponent_Factory(t) { return new (t || CounterComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CounterComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CounterComponent, selectors: [["app-counter"]], hostBindings: function CounterComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("scroll", function CounterComponent_scroll_HostBindingHandler($event) { return ctx.onWindowChange($event); }, false, ɵngcc0.ɵɵresolveWindow)("resize", function CounterComponent_resize_HostBindingHandler($event) { return ctx.onWindowChange($event); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { mode: "mode", from: "from", to: "to", animationTime: "animationTime", animationType: "animationType", showCircle: "showCircle", circleColor: "circleColor", fontSize: "fontSize", delay: "delay", finishedText: "finishedText", of: "of" }, outputs: { finished: "finished" }, ngContentSelectors: _c2, decls: 5, vars: 8, consts: [[1, "ng-counter", 3, "ngClass"], [1, "ng-counter__text"], [3, "ngIf"], ["class", "ng-counter__circle", 3, "ngStyle", 4, "ngIf"], [1, "ng-counter__prefix"], [1, "ng-counter__number"], [1, "ng-counter__suffix"], [1, "ng-counter__finish_text"], [1, "ng-counter__circle", 3, "ngStyle"], [1, "ng-counter__circle__bar", 3, "ngStyle"], [1, "ng-counter__circle__fill", 3, "ngStyle"]], template: function CounterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, CounterComponent_ng_template_2_Template, 6, 1, "ng-template", 2);
        ɵngcc0.ɵɵtemplate(3, CounterComponent_ng_template_3_Template, 2, 1, "ng-template", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, CounterComponent_div_4_Template, 3, 3, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("font-size", ctx.fontSize + "px");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c1, ctx.showCircle));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.finishedCounting || !ctx.finishedText.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.finishedCounting && ctx.finishedText.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCircle);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgStyle], styles: [".ng-counter[_ngcontent-%COMP%]{display:inline-block;position:relative;font-size:150px}.ng-counter.ng-counter--with-circle[_ngcontent-%COMP%]{width:1em;height:1em;box-sizing:content-box}.ng-counter.ng-counter--with-circle[_ngcontent-%COMP%]   .ng-counter__text[_ngcontent-%COMP%]{align-items:center;justify-content:center;height:1em}.ng-counter__text[_ngcontent-%COMP%]{display:flex}.ng-counter__finish_text[_ngcontent-%COMP%], .ng-counter__number[_ngcontent-%COMP%], .ng-counter__prefix[_ngcontent-%COMP%], .ng-counter__suffix[_ngcontent-%COMP%]{font-size:.3em}.ng-counter__circle[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:1em;height:1em;box-sizing:content-box}.ng-counter__circle__bar[_ngcontent-%COMP%], .ng-counter__circle__fill[_ngcontent-%COMP%]{position:absolute;border:.08em solid;width:.84em;height:.84em;clip:rect(0,.5em,1em,0);border-radius:50%;box-sizing:content-box}"] });
/** @nocollapse */
CounterComponent.ctorParameters = () => [
    { type: ElementRef, },
];
CounterComponent.propDecorators = {
    "mode": [{ type: Input },],
    "from": [{ type: Input },],
    "to": [{ type: Input },],
    "of": [{ type: Input },],
    "animationTime": [{ type: Input },],
    "animationType": [{ type: Input },],
    "showCircle": [{ type: Input },],
    "circleColor": [{ type: Input },],
    "fontSize": [{ type: Input },],
    "delay": [{ type: Input },],
    "finishedText": [{ type: Input },],
    "finished": [{ type: Output },],
    "onWindowChange": [{ type: HostListener, args: ['window:scroll', ['$event'],] }, { type: HostListener, args: ['window:resize', ['$event'],] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CounterComponent, [{
        type: Component,
        args: [{
                selector: 'app-counter',
                template: `<div class="ng-counter" [style.font-size]="fontSize + 'px'" [ngClass]="{'ng-counter--with-circle' : showCircle}">
    <div class="ng-counter__text">
        <ng-template [ngIf]="!finishedCounting || !finishedText.length">
            <span class="ng-counter__prefix">
                <ng-content select="ng-counter-prefix"></ng-content>
            </span>
            <span class="ng-counter__number">{{count}}</span>
            <span class="ng-counter__suffix">
                <ng-content select="ng-counter-suffix"></ng-content>
            </span>
        </ng-template>
        <ng-template [ngIf]="finishedCounting && finishedText.length">
            <span class="ng-counter__finish_text">{{finishedText}}</span>
        </ng-template>
    </div>
    <div class="ng-counter__circle" *ngIf="showCircle" [ngStyle]="getCircleStyle()">
        <div class="ng-counter__circle__bar" [ngStyle]="getBarStyle()"></div>
        <div class="ng-counter__circle__fill" [ngStyle]="getFillStyle()"></div>
    </div>
</div>`,
                styles: [`.ng-counter{display:inline-block;position:relative;font-size:150px}.ng-counter.ng-counter--with-circle{width:1em;height:1em;box-sizing:content-box}.ng-counter.ng-counter--with-circle .ng-counter__text{align-items:center;justify-content:center;height:1em}.ng-counter__text{display:flex}.ng-counter__finish_text,.ng-counter__number,.ng-counter__prefix,.ng-counter__suffix{font-size:.3em}.ng-counter__circle{position:absolute;top:0;left:0;width:1em;height:1em;box-sizing:content-box}.ng-counter__circle__bar,.ng-counter__circle__fill{position:absolute;border:.08em solid;width:.84em;height:.84em;clip:rect(0,.5em,1em,0);border-radius:50%;box-sizing:content-box}`]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { mode: [{
            type: Input
        }], from: [{
            type: Input
        }], to: [{
            type: Input
        }], animationTime: [{
            type: Input
        }], animationType: [{
            type: Input
        }], showCircle: [{
            type: Input
        }], circleColor: [{
            type: Input
        }], fontSize: [{
            type: Input
        }], delay: [{
            type: Input
        }], finishedText: [{
            type: Input
        }], finished: [{
            type: Output
        }], 
    /**
     * @param {?} $event
     * @return {?}
     */
    onWindowChange: [{
            type: HostListener,
            args: ['window:scroll', ['$event']]
        }, {
            type: HostListener,
            args: ['window:resize', ['$event']]
        }], of: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CounterModule {
}
CounterModule.ɵfac = function CounterModule_Factory(t) { return new (t || CounterModule)(); };
CounterModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CounterModule });
CounterModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CounterModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CounterComponent
                ],
                imports: [
                    CommonModule
                ],
                schemas: [CUSTOM_ELEMENTS_SCHEMA],
                exports: [
                    CounterComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CounterModule, { declarations: function () { return [CounterComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CounterComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { CounterModule, CounterComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,