{"version":3,"sources":["ng://angular-circle-counter/src/app/counter/counter.component.ts","ng://angular-circle-counter/src/app/counter/counter.module.ts"],"names":["CounterComponent","hostElement","this","EventEmitter","nativeElement","prototype","onWindowChange","$event","mode","hold","isElementInViewport","start","Object","defineProperty","_startTimeout","value","_nativeElement","_holdProgress","_percentDone","_count","_startTime","_hold","_finishedCounting","ngOnInit","init","_this","delay","startTimeout","window","setTimeout","startAction","stop","clearTimeout","restart","count","from","holdProgress","startTime","undefined","percentDone","finishedCounting","of","to","getCircleStyle","clip","getBarStyle","transform","border-color","circleColor","getFillStyle","rotateDeg","display","requestFrame","step","timestamp","progress","easeValue","ease","animationType","animationTime","currentCount","Math","round","finished","emit","requestAnimationFrame","bind","rect","getBoundingClientRect","top","bottom","innerHeight","document","documentElement","clientHeight","Component","args","selector","template","styles","ElementRef","Input","Output","HostListener","type","CounterModule","NgModule","declarations","imports","CommonModule","schemas","CUSTOM_ELEMENTS_SCHEMA","exports"],"mappings":"yYAAA,IAAAA,EAAA,WA2DI,SAAAA,EAAoBC,GAAAC,KAAAD,YAAAA,YA/BI,mBACA,UACF,qBAEW,uBACA,0BACF,mBACA,wBACH,eACH,oBACO,iBACX,IAAIE,EAAAA,yBACA,oBAGM,qBACC,0BAGK,EAajCD,KAAKE,cAAgBH,EAAwC,qBAVjED,EAAAK,UAAAC,wBAAeC,GACO,aAAdL,KAAKM,MAGLN,KAAKO,MAAQP,KAAKQ,uBAClBR,KAAKS,SAQbC,OAAAC,eAAIb,EAAAK,UAAA,eAAY,KAAhB,WACI,OAAOH,KAAKY,mBAGhB,SAAiBC,GACbb,KAAKY,cAAgBC,mCAGzBH,OAAAC,eAAIb,EAAAK,UAAA,gBAAa,KAAjB,WACI,OAAOH,KAAKc,oBAGhB,SAAkBD,GACdb,KAAKc,eAAiBD,mCAG1BH,OAAAC,eAAIb,EAAAK,UAAA,eAAY,KAAhB,WACI,OAAOH,KAAKe,mBAGhB,SAAiBF,GACbb,KAAKe,cAAgBF,mCAGzBH,OAAAC,eAAIb,EAAAK,UAAA,cAAW,KAAf,WACI,OAAOH,KAAKgB,kBAGhB,SAAgBH,GACZb,KAAKgB,aAAeH,mCAGxBH,OAAAC,eAAIb,EAAAK,UAAA,QAAK,KAAT,WACI,OAAOH,KAAKiB,YAGhB,SAAUJ,GACNb,KAAKiB,OAASJ,mCAGlBH,OAAAC,eAAIb,EAAAK,UAAA,YAAS,KAAb,WACI,OAAOH,KAAKkB,gBAGhB,SAAcL,GACVb,KAAKkB,WAAaL,mCAGtBH,OAAAC,eAAIb,EAAAK,UAAA,OAAI,KAAR,WACI,OAAOH,KAAKmB,WAGhB,SAASN,GACLb,KAAKmB,MAAQN,mCAGjBH,OAAAC,eAAIb,EAAAK,UAAA,mBAAgB,KAApB,WACI,OAAOH,KAAKoB,uBAGhB,SAAqBP,GACjBb,KAAKoB,kBAAoBP,mCAG7Bf,EAAAK,UAAAkB,SAAA,WACIrB,KAAKsB,QAGTxB,EAAAK,UAAAM,MAAA,WAAA,IAAAc,EAAAvB,KACqB,EAAbA,KAAKwB,MACLxB,KAAKyB,aAAeC,OAAOC,WAAW,WAClCJ,EAAKK,eACN5B,KAAKwB,OAGZxB,KAAK4B,eAGT9B,EAAAK,UAAA0B,KAAA,WACIH,OAAOI,aAAa9B,KAAKyB,cACzBzB,KAAKO,MAAO,GAGhBT,EAAAK,UAAA4B,QAAA,WACI/B,KAAKsB,QAGTxB,EAAAK,UAAAmB,KAAA,WACItB,KAAKO,MAAO,EACZP,KAAKgC,MAAQhC,KAAKiC,KAClBjC,KAAKkC,aAAe,EACpBlC,KAAKmC,UAAYC,UACjBpC,KAAKqC,YAAc,EACnBrC,KAAKsC,kBAAmB,EACxBZ,OAAOI,aAAa9B,KAAKyB,cACF,oBAAZzB,KAAKuC,KACZvC,KAAKuC,GAAKvC,KAAKwC,IAED,WAAdxC,KAAKM,MACLN,KAAKS,SAIbX,EAAAK,UAAAsC,eAAA,WACI,MAAO,CACHC,KAA4B,IAApB1C,KAAKqC,YAAqB,+BAAiC,+BAI3EvC,EAAAK,UAAAwC,YAAA,WAEI,MAAO,CACHC,UAAa,UAFC,IAAM5C,KAAKqC,YAEO,OAChCQ,eAAgB7C,KAAK8C,cAI7BhD,EAAAK,UAAA4C,aAAA,WACI,IAAMC,EAA+B,GAAnBhD,KAAKqC,YAAoB,IAAM,EACjD,MAAO,CACHY,QAAWjD,KAAKqC,aAAe,GAAM,OAAS,QAC9CO,UAAa,UAAUI,EAAS,OAChCH,eAAgB7C,KAAK8C,cAIrBhD,EAAAK,UAAAyB,uBACJ5B,KAAKO,MAAO,EACZP,KAAKkD,gBAGDpD,EAAAK,UAAAgD,cAAKC,GACJpD,KAAKmC,YACNnC,KAAKmC,UAAYiB,GAErB,IAAIC,EAAWD,EAAYpD,KAAKmC,UAEhC,GADAkB,GAAYrD,KAAKkC,aACblC,KAAKO,KAGL,OAFAP,KAAKkC,aAAemB,OACpBrD,KAAKmC,UAAYC,WAGrB,IAAMkB,EAAYC,EAAKvD,KAAKwD,eAAeH,EAAWrD,KAAKyD,eACvDC,EAAeC,KAAKC,MAAMN,EAAYtD,KAAKwC,IAC3CkB,GAAgB1D,KAAKwC,KACrBkB,EAAe1D,KAAKwC,IAExBxC,KAAKgC,MAAQ0B,EACb1D,KAAKqC,YAAcqB,EAAe1D,KAAKuC,GACnCc,EAAWrD,KAAKyD,cAChBzD,KAAKkD,gBAITlD,KAAKsC,kBAAmB,EACxBtC,KAAK6D,SAASC,SAGVhE,EAAAK,UAAA+C,wBACJxB,OAAOqC,sBAAsB/D,KAAKmD,KAAKa,KAAKhE,QAGxCF,EAAAK,UAAAK,+BACJ,IAAMyD,EAAOjE,KAAKE,cAAcgE,wBAChC,OACgB,GAAZD,EAAKE,KACLF,EAAKG,SAAW1C,OAAO2C,aAAeC,SAASC,gBAAgBC,mCAlO1EC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,cACVC,SAAU,khCAoBVC,OAAQ,CAAC,msBAzBMC,EAAAA,4CA4BdC,EAAAA,oBACAA,EAAAA,kBACAA,EAAAA,kBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,4BACAA,EAAAA,wBACAC,EAAAA,+BASAC,EAAAA,aAAYP,KAAA,CAAC,gBAAiB,CAAC,YAAS,CAAAQ,KACxCD,EAAAA,aAAYP,KAAA,CAAC,gBAAiB,CAAC,gBAjDpC,GCAAS,EAAA,oDAICC,EAAAA,SAAQV,KAAA,CAAC,CACNW,aAAc,CACVvF,GAEJwF,QAAS,CACLC,EAAAA,cAEJC,QAAS,CAACC,EAAAA,wBACVC,QAAS,CACL5F,SAbR","sourcesContent":["import {Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output} from '@angular/core';\nimport * as ease from 'ease-component';\n\n@Component({\n    selector: 'app-counter',\n    template: `<div class=\"ng-counter\" [style.font-size]=\"fontSize + 'px'\" [ngClass]=\"{'ng-counter--with-circle' : showCircle}\">\n    <div class=\"ng-counter__text\">\n        <ng-template [ngIf]=\"!finishedCounting || !finishedText.length\">\n            <span class=\"ng-counter__prefix\">\n                <ng-content select=\"ng-counter-prefix\"></ng-content>\n            </span>\n            <span class=\"ng-counter__number\">{{count}}</span>\n            <span class=\"ng-counter__suffix\">\n                <ng-content select=\"ng-counter-suffix\"></ng-content>\n            </span>\n        </ng-template>\n        <ng-template [ngIf]=\"finishedCounting && finishedText.length\">\n            <span class=\"ng-counter__finish_text\">{{finishedText}}</span>\n        </ng-template>\n    </div>\n    <div class=\"ng-counter__circle\" *ngIf=\"showCircle\" [ngStyle]=\"getCircleStyle()\">\n        <div class=\"ng-counter__circle__bar\" [ngStyle]=\"getBarStyle()\"></div>\n        <div class=\"ng-counter__circle__fill\" [ngStyle]=\"getFillStyle()\"></div>\n    </div>\n</div>`,\n    styles: [`.ng-counter{display:inline-block;position:relative;font-size:150px}.ng-counter.ng-counter--with-circle{width:1em;height:1em;box-sizing:content-box}.ng-counter.ng-counter--with-circle .ng-counter__text{align-items:center;justify-content:center;height:1em}.ng-counter__text{display:flex}.ng-counter__finish_text,.ng-counter__number,.ng-counter__prefix,.ng-counter__suffix{font-size:.3em}.ng-counter__circle{position:absolute;top:0;left:0;width:1em;height:1em;box-sizing:content-box}.ng-counter__circle__bar,.ng-counter__circle__fill{position:absolute;border:.08em solid;width:.84em;height:.84em;clip:rect(0,.5em,1em,0);border-radius:50%;box-sizing:content-box}`],\n})\nexport class CounterComponent implements OnInit {\n    @Input() mode: string = 'onInit';\n    @Input() from: number = 0;\n    @Input() to: number = 0;\n    @Input() of: number;\n    @Input() animationTime: number = 4000;\n    @Input() animationType: string = 'linear';\n    @Input() showCircle: boolean = true;\n    @Input() circleColor: string = '#307bbb';\n    @Input() fontSize: number = 150;\n    @Input() delay: number = 0;\n    @Input() finishedText: string = '';\n    @Output() finished = new EventEmitter();\n    private _hold: boolean = true;\n    private _count: number;\n    private _startTime: number;\n    private _percentDone: number = 0;\n    private _holdProgress: number = 0;\n    private _nativeElement: HTMLElement;\n    private _startTimeout;\n    private _finishedCounting: boolean = false;\n    @HostListener('window:scroll', ['$event'])\n    @HostListener('window:resize', ['$event'])\n    onWindowChange($event) {\n        if (this.mode !== 'viewport') {\n            return;\n        }\n        if (this.hold && this.isElementInViewport()) {\n            this.start();\n        }\n    }\n\n    constructor(private hostElement: ElementRef) {\n        this.nativeElement = hostElement.nativeElement as HTMLElement;\n    }\n\n    get startTimeout() {\n        return this._startTimeout;\n    }\n\n    set startTimeout(value) {\n        this._startTimeout = value;\n    }\n\n    get nativeElement(): HTMLElement {\n        return this._nativeElement;\n    }\n\n    set nativeElement(value: HTMLElement) {\n        this._nativeElement = value;\n    }\n\n    get holdProgress(): number {\n        return this._holdProgress;\n    }\n\n    set holdProgress(value: number) {\n        this._holdProgress = value;\n    }\n\n    get percentDone(): number {\n        return this._percentDone;\n    }\n\n    set percentDone(value: number) {\n        this._percentDone = value;\n    }\n\n    get count(): number {\n        return this._count;\n    }\n\n    set count(value: number) {\n        this._count = value;\n    }\n\n    get startTime(): number {\n        return this._startTime;\n    }\n\n    set startTime(value: number) {\n        this._startTime = value;\n    }\n\n    get hold(): boolean {\n        return this._hold;\n    }\n\n    set hold(value: boolean) {\n        this._hold = value;\n    }\n\n    get finishedCounting(): boolean {\n        return this._finishedCounting;\n    }\n\n    set finishedCounting(value: boolean) {\n        this._finishedCounting = value;\n    }\n\n    ngOnInit(): void {\n        this.init();\n    }\n\n    start(): void {\n        if (this.delay > 0) {\n            this.startTimeout = window.setTimeout(() => {\n                this.startAction();\n            }, this.delay);\n            return;\n        }\n        this.startAction();\n    }\n\n    stop(): void {\n        window.clearTimeout(this.startTimeout);\n        this.hold = true;\n    }\n\n    restart(): void {\n        this.init();\n    }\n\n    init(): void {\n        this.hold = true;\n        this.count = this.from;\n        this.holdProgress = 0;\n        this.startTime = undefined;\n        this.percentDone = 0;\n        this.finishedCounting = false;\n        window.clearTimeout(this.startTimeout);\n        if (typeof this.of === 'undefined') {\n            this.of = this.to;\n        }\n        if (this.mode === 'onInit') {\n            this.start();\n        }\n    }\n\n    getCircleStyle(): any {\n        return {\n            'clip': this.percentDone >= 0.5 ? 'rect(auto, auto, auto, auto)' : 'rect(0em, 1em, 1em, 0.5em)'\n        };\n    }\n\n    getBarStyle(): any {\n        const rotateDeg = 360 * this.percentDone;\n        return {\n            'transform': `rotate(${rotateDeg}deg)`,\n            'border-color': this.circleColor\n        };\n    }\n\n    getFillStyle(): any {\n        const rotateDeg = this.percentDone > 0.5 ? 180 : 0;\n        return {\n            'display': this.percentDone <= 0.5 ? 'none' : 'block',\n            'transform': `rotate(${rotateDeg}deg)`,\n            'border-color': this.circleColor\n        };\n    }\n\n    private startAction(): void {\n        this.hold = false;\n        this.requestFrame();\n    }\n\n    private step(timestamp): void {\n        if (!this.startTime) {\n            this.startTime = timestamp;\n        }\n        let progress = timestamp - this.startTime;\n        progress += this.holdProgress;\n        if (this.hold) {\n            this.holdProgress = progress;\n            this.startTime = undefined;\n            return;\n        }\n        const easeValue = ease[this.animationType](progress / this.animationTime);\n        let currentCount = Math.round(easeValue * this.to);\n        if (currentCount >= this.to) {\n            currentCount = this.to;\n        }\n        this.count = currentCount;\n        this.percentDone = currentCount / this.of;\n        if (progress < this.animationTime) {\n            this.requestFrame();\n            return;\n        }\n        // Finished\n        this.finishedCounting = true;\n        this.finished.emit();\n    }\n\n    private requestFrame(): void {\n        window.requestAnimationFrame(this.step.bind(this));\n    }\n\n    private isElementInViewport(): boolean {\n        const rect = this.nativeElement.getBoundingClientRect();\n        return (\n            rect.top >= 0 &&\n            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n        );\n    }\n}\n","import {NgModule, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport {CounterComponent} from './counter.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    declarations: [\n        CounterComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\n    exports: [\n        CounterComponent\n    ]\n})\nexport class CounterModule {\n}\n"]}