import { Component, ElementRef, EventEmitter, HostListener, Input, Output, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import * as ease from 'ease-component';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CounterComponent {
    /**
     * @param {?} hostElement
     */
    constructor(hostElement) {
        this.hostElement = hostElement;
        this.mode = 'onInit';
        this.from = 0;
        this.to = 0;
        this.animationTime = 4000;
        this.animationType = 'linear';
        this.showCircle = true;
        this.circleColor = '#307bbb';
        this.fontSize = 150;
        this.delay = 0;
        this.finishedText = '';
        this.finished = new EventEmitter();
        this._hold = true;
        this._percentDone = 0;
        this._holdProgress = 0;
        this._finishedCounting = false;
        this.nativeElement = /** @type {?} */ (hostElement.nativeElement);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onWindowChange($event) {
        if (this.mode !== 'viewport') {
            return;
        }
        if (this.hold && this.isElementInViewport()) {
            this.start();
        }
    }
    /**
     * @return {?}
     */
    get startTimeout() {
        return this._startTimeout;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startTimeout(value) {
        this._startTimeout = value;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this._nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nativeElement(value) {
        this._nativeElement = value;
    }
    /**
     * @return {?}
     */
    get holdProgress() {
        return this._holdProgress;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set holdProgress(value) {
        this._holdProgress = value;
    }
    /**
     * @return {?}
     */
    get percentDone() {
        return this._percentDone;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set percentDone(value) {
        this._percentDone = value;
    }
    /**
     * @return {?}
     */
    get count() {
        return this._count;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set count(value) {
        this._count = value;
    }
    /**
     * @return {?}
     */
    get startTime() {
        return this._startTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startTime(value) {
        this._startTime = value;
    }
    /**
     * @return {?}
     */
    get hold() {
        return this._hold;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hold(value) {
        this._hold = value;
    }
    /**
     * @return {?}
     */
    get finishedCounting() {
        return this._finishedCounting;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set finishedCounting(value) {
        this._finishedCounting = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    start() {
        if (this.delay > 0) {
            this.startTimeout = window.setTimeout(() => {
                this.startAction();
            }, this.delay);
            return;
        }
        this.startAction();
    }
    /**
     * @return {?}
     */
    stop() {
        window.clearTimeout(this.startTimeout);
        this.hold = true;
    }
    /**
     * @return {?}
     */
    restart() {
        this.init();
    }
    /**
     * @return {?}
     */
    init() {
        this.hold = true;
        this.count = this.from;
        this.holdProgress = 0;
        this.startTime = undefined;
        this.percentDone = 0;
        this.finishedCounting = false;
        window.clearTimeout(this.startTimeout);
        if (typeof this.of === 'undefined') {
            this.of = this.to;
        }
        if (this.mode === 'onInit') {
            this.start();
        }
    }
    /**
     * @return {?}
     */
    getCircleStyle() {
        return {
            'clip': this.percentDone >= 0.5 ? 'rect(auto, auto, auto, auto)' : 'rect(0em, 1em, 1em, 0.5em)'
        };
    }
    /**
     * @return {?}
     */
    getBarStyle() {
        const /** @type {?} */ rotateDeg = 360 * this.percentDone;
        return {
            'transform': `rotate(${rotateDeg}deg)`,
            'border-color': this.circleColor
        };
    }
    /**
     * @return {?}
     */
    getFillStyle() {
        const /** @type {?} */ rotateDeg = this.percentDone > 0.5 ? 180 : 0;
        return {
            'display': this.percentDone <= 0.5 ? 'none' : 'block',
            'transform': `rotate(${rotateDeg}deg)`,
            'border-color': this.circleColor
        };
    }
    /**
     * @return {?}
     */
    startAction() {
        this.hold = false;
        this.requestFrame();
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    step(timestamp) {
        if (!this.startTime) {
            this.startTime = timestamp;
        }
        let /** @type {?} */ progress = timestamp - this.startTime;
        progress += this.holdProgress;
        if (this.hold) {
            this.holdProgress = progress;
            this.startTime = undefined;
            return;
        }
        const /** @type {?} */ easeValue = ease[this.animationType](progress / this.animationTime);
        let /** @type {?} */ currentCount = Math.round(easeValue * this.to);
        if (currentCount >= this.to) {
            currentCount = this.to;
        }
        this.count = currentCount;
        this.percentDone = currentCount / this.of;
        if (progress < this.animationTime) {
            this.requestFrame();
            return;
        }
        // Finished
        this.finishedCounting = true;
        this.finished.emit();
    }
    /**
     * @return {?}
     */
    requestFrame() {
        window.requestAnimationFrame(this.step.bind(this));
    }
    /**
     * @return {?}
     */
    isElementInViewport() {
        const /** @type {?} */ rect = this.nativeElement.getBoundingClientRect();
        return (rect.top >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight));
    }
}
CounterComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-counter',
                template: `<div class="ng-counter" [style.font-size]="fontSize + 'px'" [ngClass]="{'ng-counter--with-circle' : showCircle}">
    <div class="ng-counter__text">
        <ng-template [ngIf]="!finishedCounting || !finishedText.length">
            <span class="ng-counter__prefix">
                <ng-content select="ng-counter-prefix"></ng-content>
            </span>
            <span class="ng-counter__number">{{count}}</span>
            <span class="ng-counter__suffix">
                <ng-content select="ng-counter-suffix"></ng-content>
            </span>
        </ng-template>
        <ng-template [ngIf]="finishedCounting && finishedText.length">
            <span class="ng-counter__finish_text">{{finishedText}}</span>
        </ng-template>
    </div>
    <div class="ng-counter__circle" *ngIf="showCircle" [ngStyle]="getCircleStyle()">
        <div class="ng-counter__circle__bar" [ngStyle]="getBarStyle()"></div>
        <div class="ng-counter__circle__fill" [ngStyle]="getFillStyle()"></div>
    </div>
</div>`,
                styles: [`.ng-counter{display:inline-block;position:relative;font-size:150px}.ng-counter.ng-counter--with-circle{width:1em;height:1em;box-sizing:content-box}.ng-counter.ng-counter--with-circle .ng-counter__text{align-items:center;justify-content:center;height:1em}.ng-counter__text{display:flex}.ng-counter__finish_text,.ng-counter__number,.ng-counter__prefix,.ng-counter__suffix{font-size:.3em}.ng-counter__circle{position:absolute;top:0;left:0;width:1em;height:1em;box-sizing:content-box}.ng-counter__circle__bar,.ng-counter__circle__fill{position:absolute;border:.08em solid;width:.84em;height:.84em;clip:rect(0,.5em,1em,0);border-radius:50%;box-sizing:content-box}`],
            },] },
];
/** @nocollapse */
CounterComponent.ctorParameters = () => [
    { type: ElementRef, },
];
CounterComponent.propDecorators = {
    "mode": [{ type: Input },],
    "from": [{ type: Input },],
    "to": [{ type: Input },],
    "of": [{ type: Input },],
    "animationTime": [{ type: Input },],
    "animationType": [{ type: Input },],
    "showCircle": [{ type: Input },],
    "circleColor": [{ type: Input },],
    "fontSize": [{ type: Input },],
    "delay": [{ type: Input },],
    "finishedText": [{ type: Input },],
    "finished": [{ type: Output },],
    "onWindowChange": [{ type: HostListener, args: ['window:scroll', ['$event'],] }, { type: HostListener, args: ['window:resize', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CounterModule {
}
CounterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CounterComponent
                ],
                imports: [
                    CommonModule
                ],
                schemas: [CUSTOM_ELEMENTS_SCHEMA],
                exports: [
                    CounterComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { CounterModule, CounterComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,