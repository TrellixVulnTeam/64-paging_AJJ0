{"version":3,"file":"rand-seed.es.js","sources":["../src/Algorithms/Base.ts","../src/Rand.ts","../src/Algorithms/Mulberry32.ts","../src/Algorithms/Sfc32.ts","../src/Algorithms/Xoshiro128ss.ts","../src/helpers.ts"],"sourcesContent":["abstract class Base {\n\n    /**\n     * Generate a hash from a string that is suitable to use as a seed for any\n     * of the PRNG's that inherit from this.\n     *\n     * @param {string} str\n     * @returns {Function}\n     */\n    protected static _xfnv1a(str: string): () => number {\n        let h = 2166136261 >>> 0;\n\n        for (let i = 0; i < str.length; i++) {\n            h = Math.imul(h ^ str.charCodeAt(i), 16777619);\n        }\n\n        return (): number => {\n            h += h << 13; h ^= h >>> 7;\n            h += h << 3; h ^= h >>> 17;\n\n            return (h += h << 5) >>> 0;\n        };\n    }\n\n}\n\nexport default Base;\n","import AlgorithmContract from './Algorithm';\nimport Mulberry32 from './Algorithms/Mulberry32';\nimport Sfc32 from './Algorithms/Sfc32';\nimport Xoshiro128ss from './Algorithms/Xoshiro128ss';\nimport {isNullOrUndefined} from './helpers';\n\n/**\n * Available seedable random number generator algorithms.\n *\n * @var {PRNG}\n */\nexport enum PRNG {\n    sfc32 = 'sfc32',\n    mulberry32 = 'mulberry32',\n    xoshiro128ss = 'xoshiro128ss'\n}\n\n/**\n * A class for generating random numbers. Several different (seedable) random\n * number generator algorithms are configurable.\n *\n * See https://stackoverflow.com/a/47593316/7024747 for more info.\n */\nclass Rand {\n\n    /**\n     * The string that will be used for generating a suitable hash for any of\n     * the provided PRNG algorithms.\n     *\n     * @var {string}\n     */\n    private _str?: string;\n\n    /**\n     * The PRNG algorithm that should be used for random number generation.\n     *\n     * @var {PRNG}\n     */\n    private _prng: PRNG;\n\n    /**\n     * The generator that should be used for generating random numbers.\n     *\n     * @var {Function}\n     */\n    private _generator: AlgorithmContract;\n\n    /**\n     * Create a new rand instance.\n     *\n     * @param {string} str\n     * @param {PRNG} prng\n     */\n    public constructor(str?: string, prng: PRNG = PRNG.sfc32) {\n        this._str = str;\n        this._prng = prng;\n        this._generator = this._initializeGenerator();\n    }\n\n    /**\n     * Generate a new random number using the selected generator.\n     *\n     * @returns {number}\n     */\n    public next(): number {\n        return this._generator.next();\n    }\n\n    /**\n     * Initialize the chosen random number generator.\n     *\n     * @returns {Algorithm|Function}\n     */\n    private _initializeGenerator(): AlgorithmContract {\n        if (isNullOrUndefined(this._str)) return this._wrap();\n\n        switch (this._prng) {\n            case 'sfc32':\n                return new Sfc32(this._str);\n            case 'mulberry32':\n                return new Mulberry32(this._str);\n            case 'xoshiro128ss':\n                return new Xoshiro128ss(this._str);\n            default:\n                return this._wrap();\n        }\n    }\n\n    /**\n     * Wrap the standard random function in an object.\n     *\n     * @returns {Algorithm}\n     */\n    private _wrap(): AlgorithmContract {\n        return {\n            next(): number {\n                return Math.random();\n            }\n        };\n    }\n\n}\n\nexport default Rand;\n","import Base from './Base';\nimport AlgorithmContract from '../Algorithm';\n\nclass Mulberry32 extends Base implements AlgorithmContract {\n\n    /**\n     * Seed parameter.\n     *\n     * @var {number}\n     */\n    private _a: number;\n\n    /**\n     * Create a new mulberry32 instance.\n     *\n     * @param {string} str\n     */\n    public constructor(str: string) {\n        super();\n\n        this._a = Mulberry32._xfnv1a(str)();\n    }\n\n    /**\n     * Generate a random number using the mulberry32 algorithm.\n     *\n     * @returns {number}\n     */\n    public next(): number {\n        let t = this._a += 0x6D2B79F5;\n        t = Math.imul(t ^ t >>> 15, t | 1);\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n\n        return ((t ^ t >>> 14) >>> 0) / 4294967296;\n    }\n\n}\n\nexport default Mulberry32;\n","import Base from './Base';\nimport AlgorithmContract from '../Algorithm';\n\nclass Sfc32 extends Base implements AlgorithmContract {\n\n    /**\n     * Seed parameters.\n     *\n     * @var {number}\n     */\n    private _a: number;\n    private _b: number;\n    private _c: number;\n    private _d: number;\n\n    /**\n     * Create a new sfc32 instance.\n     *\n     * @param {string} str\n     */\n    public constructor(str: string) {\n        super();\n\n        // Create the seed for the random number algorithm\n        const seed = Sfc32._xfnv1a(str);\n        this._a = seed();\n        this._b = seed();\n        this._c = seed();\n        this._d = seed();\n    }\n\n    /**\n     * Generate a random number using the sfc32 algorithm.\n     *\n     * @returns {number}\n     */\n    public next(): number {\n        this._a >>>= 0; this._b >>>= 0; this._c >>>= 0; this._d >>>= 0;\n        let t = (this._a + this._b) | 0;\n        this._a = this._b ^ this._b >>> 9;\n        this._b = this._c + (this._c << 3) | 0;\n        this._c = (this._c << 21 | this._c >>> 11);\n        this._d = this._d + 1 | 0;\n        t = t + this._d | 0;\n        this._c = this._c + t | 0;\n\n        return (t >>> 0) / 4294967296;\n    }\n\n}\n\nexport default Sfc32;\n","import Base from './Base';\nimport AlgorithmContract from '../Algorithm';\n\nclass Xoshiro128ss extends Base implements AlgorithmContract {\n\n    /**\n     * Seed parameters.\n     *\n     * @var {number}\n     */\n    private _a: number;\n    private _b: number;\n    private _c: number;\n    private _d: number;\n\n    /**\n     * Create a new xoshiro128** instance.\n     *\n     * @param {string} str\n     */\n    public constructor(str: string) {\n        super();\n\n        // Create the seed for the random number algorithm\n        const seed = Xoshiro128ss._xfnv1a(str);\n        this._a = seed();\n        this._b = seed();\n        this._c = seed();\n        this._d = seed();\n    }\n\n    /**\n     * Generate a random number using the xoshiro128** algorithm.\n     *\n     * @returns {number}\n     */\n    public next(): number {\n        const t = this._b << 9;\n        let r = this._a * 5;\n        r = (r << 7 | r >>> 25) * 9;\n        this._c ^= this._a; this._d ^= this._b;\n        this._b ^= this._c; this._a ^= this._d; this._c ^= t;\n        this._d = this._d << 11 | this._d >>> 21;\n\n        return (r >>> 0) / 4294967296;\n    }\n\n}\n\nexport default Xoshiro128ss;\n","/**\n * Determine if the given value is undefined.\n *\n * @param {mixed} value\n * @returns {boolean}\n */\nexport const isUndefined = (value: unknown): value is undefined => (\n    typeof value === 'undefined'\n);\n\n/**\n * Determine if the given value is null.\n *\n * @param {mixed} value\n * @returns {boolean}\n */\nexport const isNull = (value: unknown): value is null => value === null;\n\n/**\n * Determine if the given value is null or undefined.\n *\n * @param {mixed} value\n * @returns {boolean}\n */\nexport const isNullOrUndefined = (value: unknown): value is null | undefined => (\n    isNull(value) || isUndefined(value)\n);\n"],"names":["PRNG","Base","str","h","i","length","Math","imul","charCodeAt","_super","_this","_a","Mulberry32","_xfnv1a","__extends","t","this","seed","Sfc32","_b","_c","_d","Xoshiro128ss","r","prng","sfc32","_str","_prng","_generator","_initializeGenerator","Rand","next","value","isNull","isUndefined","_wrap","random"],"mappings":"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"}